import { readdirSync, statSync } from "node:fs";
import { join, relative } from "node:path";
const PACKAGE_NAME = "@opennextjs/cloudflare";
/**
 * Computes the configuration.
 *
 * @param projectOpts The options for the project
 * @returns The configuration, see `Config`
 */
export function getConfig(projectOpts) {
    const sourceDirDotNext = join(projectOpts.sourceDir, ".next");
    const dotNext = join(projectOpts.outputDir, ".next");
    const appPath = getNextjsApplicationPath(dotNext).replace(/\/$/, "");
    const standaloneRoot = join(dotNext, "standalone");
    const standaloneApp = join(standaloneRoot, appPath);
    const standaloneAppDotNext = join(standaloneApp, ".next");
    const standaloneAppServer = join(standaloneAppDotNext, "server");
    const nodeModules = join(standaloneApp, "node_modules");
    const internalPackage = join(nodeModules, ...PACKAGE_NAME.split("/"));
    const internalTemplates = join(internalPackage, "cli", "templates");
    return {
        build: {
            skipNextBuild: projectOpts.skipNextBuild,
            shouldMinify: projectOpts.minify,
        },
        paths: {
            source: {
                root: projectOpts.sourceDir,
                dotNext: sourceDirDotNext,
                standaloneRoot: join(sourceDirDotNext, "standalone"),
            },
            output: {
                root: projectOpts.outputDir,
                assets: join(projectOpts.outputDir, "assets"),
                dotNext,
                standaloneRoot,
                standaloneApp,
                standaloneAppDotNext,
                standaloneAppServer,
            },
            internal: {
                package: internalPackage,
                templates: internalTemplates,
            },
        },
        internalPackageName: PACKAGE_NAME,
    };
}
export function containsDotNextDir(folder) {
    try {
        return statSync(join(folder, ".next")).isDirectory();
    }
    catch {
        return false;
    }
}
/**
 * It basically tries to find the path that the application is under inside the `.next/standalone` directory, using the `.next/server` directory
 * presence as the condition that needs to be met.
 *
 * For example:
 *  When I build the api application the `.next/server` directory is located in:
 *  `<dotNextDir>/standalone/next-apps/api/.next/server`
 *  and the function here given the `dotNextDir` returns `next-apps/api`
 */
function getNextjsApplicationPath(dotNextDir) {
    const serverPath = findServerParentPath(dotNextDir);
    if (!serverPath) {
        throw new Error(`Unexpected Error: no \`.next/server\` folder could be found in \`${serverPath}\``);
    }
    return relative(join(dotNextDir, "standalone"), serverPath);
}
function findServerParentPath(parentPath) {
    try {
        if (statSync(join(parentPath, ".next", "server")).isDirectory()) {
            return parentPath;
        }
    }
    catch {
        /* empty */
    }
    const folders = readdirSync(parentPath);
    for (const folder of folders) {
        const subFolder = join(parentPath, folder);
        if (statSync(join(parentPath, folder)).isDirectory()) {
            const dirServerPath = findServerParentPath(subFolder);
            if (dirServerPath) {
                return dirServerPath;
            }
        }
    }
}
